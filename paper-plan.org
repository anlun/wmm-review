#+TITLE: An Overview of Programming Language Memory Models
#+SUBTITLE: Plan of the research paper

* Abstract 
* Introduction
** intro
*** importance of parallel/concurrent computing today
*** importance of formal semantics
** memory model definition
** sequential consistency (SC)
*** some example (program + its executions in SC)
*** advantage of SC --- simplicity
*** disadvantage of SC --- performance penalty
** main tradeoff of WMMs: simplicity vs performance
** types of WMMs
*** hardware
*** programming language
*** different requirements and tradeoffs for HW/PL
** programming language memory models (focus of this paper)
** structure of the paper

* Requirements to the Programming Language Memory Model
** memory models under consideration
*** SC Memory Model 
**** "baseline" simple memory model
*** C/C++ Memory Model
**** should allow efficient compilation (zero-cost abstractions, don't pay for what you don't use, etc)
**** should allow agressive optimisations
**** can tolerate UB (Undefined Behaviour) in the semantics
*** Java Memory Model
**** should be as efficient as possible, yet
**** should be type and memory safe (no UB)

** sound and efficient compilation scheme
*** examples
**** store buffering
***** simplified Dekker
***** discuss ~mfence~
***** C/C++ 
****** introduce ~rlx~ and ~sc~
****** explain how they are compiled
****** rewrite Dekker in C/C++
***** Java
****** introduce ~volatile~
****** explain how it is compiled
****** rewrite Dekker in Java
**** message passing
***** simplified spinlock
****** introduce CAS here?
***** discuss ~dmb~
***** C/C++
****** introduce ~rel~ and ~acq~
****** explain how they are compiled
****** explain the difference with ~sc~
*** discuss fences and dependencies (in general)
** soundness of compiler optimisations
*** examples
**** an example of a transformation that is not sound in SC
**** an example of a transformation that is not sound in JMM
*** a list of transformations that we might want to support (?)
*** discuss UB and catch-fire semantics in C/C++
**** opportunities for compilation and optimisations
** reasoning
*** DRF (non-expert-mode)
**** DRF-SC in Java
***** example
**** DRF-SC in C/C++
***** OOTA problem
****** example
***** external/internal DRF
*** being suitable for formal verification techiniques
**** model checking 
***** a couple of words about model checking of SC
****** naive approach --- just enumerate all executions
****** mention that problem is decidable and NP-complete 
******* for programs without unbounded recursion and with finite domains
***** mention that checking whether JMM allows specific execution is undecidable
***** challenging (if possible?) for C/C++ because of OOTA
** summary
* Towards No-Thin-Air Memory Model
** motivation
** Promising
*** advantages
*** formal definition
**** operational semantics
***** explain timestamps and viewfronts
***** explain promises and certification
**** example
*** compilation
*** optimisations
*** reasoning
**** promise-free machine
**** DRF-RA
** Weakestmo
*** advantages
**** declarative
**** mention support for SC accesses
*** introduce event structures
*** formal definition
**** example
*** compilation
*** optimisations
*** reasoning
**** DRF-RLX
**** discuss model checking (not yet published) (?)
** Relaxed Modular Dependencies
*** advantages
**** mention that semantics is denotational
*** formal definition
**** example
*** compilation
*** optimisation
*** reasoning
**** discuss challenges for model checking
* Other Models
** JS/WASM Memory Model
*** introduce ~SharedArrayBuffer~
*** discuss mixed-size accesses
*** formal definition
**** examples (?)
*** compilation
*** optimisations

** OCaml Memory Model
*** intro (Multicore OCaml)
*** formal definition
**** axiomatic and operational version
*** compilation
*** optimisation
*** reasoning
**** local DRF
* Comparison 
** summary table
*** style: execution graphs, event structures, abstract machine
*** efficient compilation
*** compiler optimisations
*** DRF
*** UB
*** no OOTA
*** suitable for model checking
*** subjective complexity
** summary table with compilation mappings (?)
** summary table with supported optimisations (?)
** summary table with performance overhead (?)
* Discussion and Open Problems
